import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import {
  users,
  incidents,
  threats,
  forensicEvidence,
  flMetrics,
} from "../shared/schema";

const connectionConfig = {
  host: process.env.DATABASE_HOST || "0.0.0.0",
  port: parseInt(process.env.DATABASE_PORT || "5432"),
  username: process.env.DATABASE_USER || "postgres",
  password: process.env.DATABASE_PASSWORD || "admin",
  database: process.env.DATABASE_NAME || "mydatabase",
  ssl: false,
  max: 10,
  idle_timeout: 20,
  connect_timeout: 10,
  prepare: false,
};

let db: ReturnType<typeof drizzle> | null = null;
let sql: ReturnType<typeof postgres> | null = null;

/**
 * Initialize database connection with proper error handling
 */
export async function initializeDatabase() {
  try {
    console.log("üóÑÔ∏è Initializing database connection...");
    console.log(
      `üì° Connecting to: ${connectionConfig.host}:${connectionConfig.port}/${connectionConfig.database}`,
    );

    // Create PostgreSQL connection
    sql = postgres({
      host: connectionConfig.host,
      port: connectionConfig.port,
      username: connectionConfig.username,
      password: connectionConfig.password,
      database: connectionConfig.database,
      ssl: connectionConfig.ssl,
      max: connectionConfig.max,
      idle_timeout: connectionConfig.idle_timeout,
      connect_timeout: connectionConfig.connect_timeout,
      prepare: connectionConfig.prepare,
    });

    // Create Drizzle ORM instance
    db = drizzle(sql);

    // Test connection
    await sql`SELECT 1 as test`;
    console.log("‚úÖ Database connection established successfully");

    return db;
  } catch (error) {
    console.log("‚ö†Ô∏è Database connection failed - continuing in mock mode");
    console.log(
      "üí° Error details:",
      error instanceof Error ? error.message : "Unknown error",
    );

    // Return null to indicate database is not available
    return null;
  }
}